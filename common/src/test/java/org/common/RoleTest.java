/*
 * This source file was generated by the Gradle 'init' task
 */
package org.common;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.security.core.GrantedAuthority;
import org.utils.CustomGenerator;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.assertj.core.api.Assertions.*;

class RoleTest {
    private final CustomGenerator gen = new CustomGenerator();

    private final GrantedAuthority canPay = AuthoritiesManager.CAN_PAY_AUTH;
    private final GrantedAuthority canUpdate = AuthoritiesManager.CAN_UPDATE_COMPANY_DETAILS;
    private final GrantedAuthority canView = AuthoritiesManager.CAN_VIEW_COMPANY_DETAILS;

    private final GrantedAuthority canEditUrl = AuthoritiesManager.CAN_EDIT_URL;
    private final GrantedAuthority canUseUrl = AuthoritiesManager.CAN_USE_URL;
    private final GrantedAuthority canViewStats = AuthoritiesManager.CAN_VIEW_STATS;


    @Test
//    @Disabled
    void roleWorksWithStringIgnoreCase() {
        // make sure the managed returns the correct role for any version of the input string
        for (String orgRole : RoleManager.ROLES_STRING) {
            String s;
            for (int i = 0; i <= 10; i++) {
                s = gen.randomCaseString(orgRole);
                assertEquals(orgRole, RoleManager.getRole(s).toString());
            }
        }
    }

    @Test
//    @Disabled
    void nonRoleStringRaisesException() {
        String randomStr = gen.randomAlphaString(6);
        // make sure it throws an error for any string that does not represent a role
        for (int i = 0; i < 100; i++) {
            while (RoleManager.ROLES_STRING.contains(randomStr.toLowerCase())) {
                randomStr = gen.randomAlphaString(6);
            }
            // at this point we know that randomStr does not represent a role String
            String finalRandomStr = randomStr; //copied to a final variable so it can be used in the test lambda expression
            assertThrows(RoleManager.NoExistingRoleException.class, () -> RoleManager.getRole(finalRandomStr));
        }
    }

    @Test
    void testOwnerAuthorities() {
        Role owner = RoleManager.getRole("owner");
        List<GrantedAuthority> expected = List.of(canPay, canUpdate, canEditUrl, canView, canViewStats, canUseUrl);
        assertThat(owner.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList()).
                hasSameElementsAs(expected.stream().map(GrantedAuthority::getAuthority).toList());
    }

    @Test
    void testAdminUserAuths() {
        Role admin = RoleManager.getRole("admin");
        List<GrantedAuthority> expected = List.of(canEditUrl, canView, canViewStats, canUseUrl);
        assertThat(admin.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList()).
                hasSameElementsAs(expected.stream().map(GrantedAuthority::getAuthority).toList());
    }

    @Test
    void testRegisteredUserAuths() {
        Role registeredUser = RoleManager.getRole("registeredUser");
        List<GrantedAuthority> expected = List.of(canUseUrl);
        assertThat(registeredUser.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList()).
                hasSameElementsAs(expected.stream().map(GrantedAuthority::getAuthority).toList());
    }

}
