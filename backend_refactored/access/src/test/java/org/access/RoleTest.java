/*
 * This source file was generated by the Gradle 'init' task
 */
package org.access;

import org.junit.jupiter.api.Test;
import org.springframework.security.core.GrantedAuthority;
import org.utils.CustomGenerator;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.assertj.core.api.Assertions.*;

class RoleTest {
    private final CustomGenerator gen = new CustomGenerator();

    private final GrantedAuthority canUpdateDomainName = AuthoritiesManager.getAuthority("CAN_UPDATE_DOMAIN_NAME");
    private final GrantedAuthority canCancelSubscription = AuthoritiesManager.getAuthority("CAN_CANCEL_SUBSCRIPTION");
    private final GrantedAuthority canGenerateTokens = AuthoritiesManager.getAuthority("CAN_GENERATE_TOKENS");

    private final GrantedAuthority canViewCompanyDetails = AuthoritiesManager.getAuthority("CAN_VIEW_COMPANY_DETAILS");
    private final GrantedAuthority canViewSubscription = AuthoritiesManager.getAuthority("CAN_VIEW_SUBSCRIPTION");
    private final GrantedAuthority canEncodeUrl = AuthoritiesManager.getAuthority("CAN_ENCODE_URL");

    private final GrantedAuthority canUseShortUrl = AuthoritiesManager.getAuthority("CAN_USE_SHORT_URL");
    private final GrantedAuthority canViewHistory = AuthoritiesManager.getAuthority("CAN_VIEW_HISTORY");



    @Test
    void roleWorksWithStringIgnoreCase() {
        // make sure the managed returns the correct role for any version of the input string
        for (String orgRole : RoleManager.ROLES_STRING) {
            String s;
            for (int i = 0; i <= 10; i++) {
                s = gen.randomCaseString(orgRole);
                assertEquals(orgRole, RoleManager.getRole(s).toString());
            }
        }
    }

    @Test
    void nonRoleStringRaisesException() {
        String randomStr = gen.randomAlphaString(6);
        // make sure it throws an error for any string that does not represent a role
        for (int i = 0; i < 100; i++) {
            while (RoleManager.ROLES_STRING.contains(randomStr.toLowerCase())) {
                randomStr = gen.randomAlphaString(6);
            }
            // at this point we know that randomStr does not represent a role String
            String finalRandomStr = randomStr; //copied to a final variable so it can be used in the test lambda expression
            assertThrows(RoleManager.NoExistingRoleException.class, () -> RoleManager.getRole(finalRandomStr));
        }
    }

    @Test
    void testOwnerAuthorities() {
        Role owner = RoleManager.getRole("owner");
        List<GrantedAuthority> expected = List.of(canUpdateDomainName, 
        canCancelSubscription, 
        canGenerateTokens, 
        canViewCompanyDetails, 
        canViewSubscription, 
        canEncodeUrl, 
        canUseShortUrl,
        canViewHistory);

        assertThat(owner.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList()).
                hasSameElementsAs(expected.stream().map(GrantedAuthority::getAuthority).toList());
    }

    @Test
    void testAdminUserAuths() {
        Role admin = RoleManager.getRole("admin");
        List<GrantedAuthority> expected = List.of(canViewCompanyDetails, 
        canUseShortUrl, 
        canEncodeUrl,
        canViewHistory);


        assertThat(admin.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList()).
                hasSameElementsAs(expected.stream().map(GrantedAuthority::getAuthority).toList());
    }

    @Test
    void testRegisteredUserAuths() {
        Role employee = RoleManager.getRole("employee");

        List<GrantedAuthority> expected = List.of(canUseShortUrl, 
        canEncodeUrl, 
        canViewSubscription,
        canViewHistory);

        assertThat(employee.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList()).
                hasSameElementsAs(expected.stream().map(GrantedAuthority::getAuthority).toList());
    }

    @Test
    void testRoleSerialization() throws com.fasterxml.jackson.core.JsonProcessingException {
        // Create an ObjectMapper for serialization tests
        com.fasterxml.jackson.databind.ObjectMapper om = new com.fasterxml.jackson.databind.ObjectMapper();
        
        // Get all role types
        Role ownerRole = RoleManager.getRole(RoleManager.OWNER_ROLE);
        Role adminRole = RoleManager.getRole(RoleManager.ADMIN_ROLE);
        Role employeeRole = RoleManager.getRole(RoleManager.EMPLOYEE_ROLE);
        
        // Test owner role serialization
        String ownerJson = om.writeValueAsString(ownerRole);
        assertEquals("\"OWNER\"", ownerJson);
        
        // Test admin role serialization
        String adminJson = om.writeValueAsString(adminRole);
        assertEquals("\"ADMIN\"", adminJson);
        
        // Test employee role serialization
        String employeeJson = om.writeValueAsString(employeeRole);
        assertEquals("\"EMPLOYEE\"", employeeJson);
                
        // Test that the same Role object serializes consistently
        for (int i = 0; i < 5; i++) {
            assertEquals("\"OWNER\"", om.writeValueAsString(ownerRole));
            assertEquals("\"ADMIN\"", om.writeValueAsString(adminRole));
            assertEquals("\"EMPLOYEE\"", om.writeValueAsString(employeeRole));
        }
    }

}
